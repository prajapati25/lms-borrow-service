# Server Configuration
server.port=${SERVER_PORT:8082}

# Application Name
spring.application.name=${SPRING_APPLICATION_NAME:borrow-service}

# Active Profile
spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev}

# Disable Docker Compose
spring.docker.compose.enabled=${SPRING_DOCKER_COMPOSE_ENABLED:false}

# Database Configuration
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/borrowdb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}
spring.datasource.driver-class-name=${SPRING_DATASOURCE_DRIVER_CLASS_NAME:org.postgresql.Driver}

# Connection Pool Configuration
spring.datasource.hikari.connection-timeout=${SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT:30000}
spring.datasource.hikari.maximum-pool-size=${SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE:5}
spring.datasource.hikari.idle-timeout=${SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT:300000}
spring.datasource.hikari.pool-name=${SPRING_DATASOURCE_HIKARI_POOL_NAME:BorrowServiceHikariPool}

spring.datasource.hikari.connection-test-query=SELECT 1
spring.datasource.hikari.validation-timeout=20000
spring.datasource.hikari.max-lifetime=1200000

# JPA Configuration
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.format_sql=${SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL:true}
spring.jpa.properties.hibernate.dialect=${SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=${SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_LOB_NON_CONTEXTUAL_CREATION:true}
spring.jpa.open-in-view=${SPRING_JPA_OPEN_IN_VIEW:false}

# Actuator Configuration
management.endpoints.web.base-path=/actuator
management.endpoints.web.exposure.include=*
management.endpoint.health.enabled=true
management.endpoint.health.show-details=always
management.health.db.enabled=true
management.health.diskspace.enabled=true
management.health.defaults.enabled=true

# Flyway Configuration
spring.flyway.baseline-on-migrate=${SPRING_FLYWAY_BASELINE_ON_MIGRATE:true}
spring.flyway.enabled=${SPRING_FLYWAY_ENABLED:true}
spring.flyway.locations=${SPRING_FLYWAY_LOCATIONS:classpath:db/migration}

# Kafka Configuration
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:29092}
spring.kafka.producer.key-serializer=${SPRING_KAFKA_PRODUCER_KEY_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}
spring.kafka.producer.value-serializer=${SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER:org.apache.kafka.common.serialization.StringSerializer}
spring.kafka.consumer.group-id=${SPRING_KAFKA_CONSUMER_GROUP_ID:borrow-service-group}
spring.kafka.consumer.auto-offset-reset=${SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}
spring.kafka.consumer.key-deserializer=${SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}
spring.kafka.consumer.value-deserializer=${SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER:org.apache.kafka.common.serialization.StringDeserializer}
spring.kafka.consumer.properties.spring.json.trusted.packages=${SPRING_KAFKA_CONSUMER_PROPERTIES_SPRING_JSON_TRUSTED_PACKAGES:com.bits.borrowservice.*}

# Kafka Topic Configuration
kafka.topic.borrow-events.name=${KAFKA_TOPIC_BORROW_EVENTS_NAME:borrow-events}
kafka.topic.borrow-events.partitions=${KAFKA_TOPIC_BORROW_EVENTS_PARTITIONS:3}
kafka.topic.borrow-events.replicas=${KAFKA_TOPIC_BORROW_EVENTS_REPLICAS:1}

kafka.topic.return-events.name=${KAFKA_TOPIC_RETURN_EVENTS_NAME:return-events}
kafka.topic.return-events.partitions=${KAFKA_TOPIC_RETURN_EVENTS_PARTITIONS:3}
kafka.topic.return-events.replicas=${KAFKA_TOPIC_RETURN_EVENTS_REPLICAS:1}

kafka.topic.due-date-events.name=${KAFKA_TOPIC_DUE_DATE_EVENTS_NAME:due-date-events}
kafka.topic.due-date-events.partitions=${KAFKA_TOPIC_DUE_DATE_EVENTS_PARTITIONS:3}
kafka.topic.due-date-events.replicas=${KAFKA_TOPIC_DUE_DATE_EVENTS_REPLICAS:1}

# External Service URLs
service.book.url=${SERVICE_BOOK_URL:http://localhost:8081}
service.book.timeout=${SERVICE_BOOK_TIMEOUT:5000}
service.book.retry-attempts=${SERVICE_BOOK_RETRY_ATTEMPTS:3}
service.book.retry-delay=${SERVICE_BOOK_RETRY_DELAY:1000}

service.user.url=${SERVICE_USER_URL:http://localhost:8080}
service.user.timeout=${SERVICE_USER_TIMEOUT:5000}
service.user.retry-attempts=${SERVICE_USER_RETRY_ATTEMPTS:3}
service.user.retry-delay=${SERVICE_USER_RETRY_DELAY:1000}

# JWT Configuration
jwt.secret=${JWT_SECRET:your-256-bit-secret}
jwt.expiration=${JWT_EXPIRATION:86400000}
jwt.header=${JWT_HEADER:Authorization}
jwt.prefix=${JWT_PREFIX:Bearer }

# Resilience4j Configuration
resilience4j.circuitbreaker.instances.bookService.failure-rate-threshold=${RESILIENCE4J_CIRCUITBREAKER_BOOKSERVICE_FAILURE_RATE_THRESHOLD:50}
resilience4j.circuitbreaker.instances.bookService.minimum-number-of-calls=${RESILIENCE4J_CIRCUITBREAKER_BOOKSERVICE_MINIMUM_NUMBER_OF_CALLS:5}
resilience4j.circuitbreaker.instances.bookService.automatic-transition-from-open-to-half-open-enabled=${RESILIENCE4J_CIRCUITBREAKER_BOOKSERVICE_AUTOMATIC_TRANSITION:true}
resilience4j.circuitbreaker.instances.bookService.wait-duration-in-open-state=${RESILIENCE4J_CIRCUITBREAKER_BOOKSERVICE_WAIT_DURATION:5s}
resilience4j.circuitbreaker.instances.bookService.permitted-number-of-calls-in-half-open-state=${RESILIENCE4J_CIRCUITBREAKER_BOOKSERVICE_PERMITTED_CALLS:3}
resilience4j.circuitbreaker.instances.bookService.sliding-window-size=${RESILIENCE4J_CIRCUITBREAKER_BOOKSERVICE_SLIDING_WINDOW_SIZE:10}
resilience4j.circuitbreaker.instances.bookService.sliding-window-type=${RESILIENCE4J_CIRCUITBREAKER_BOOKSERVICE_SLIDING_WINDOW_TYPE:count_based}

resilience4j.circuitbreaker.instances.userService.failure-rate-threshold=${RESILIENCE4J_CIRCUITBREAKER_USERSERVICE_FAILURE_RATE_THRESHOLD:50}
resilience4j.circuitbreaker.instances.userService.minimum-number-of-calls=${RESILIENCE4J_CIRCUITBREAKER_USERSERVICE_MINIMUM_NUMBER_OF_CALLS:5}
resilience4j.circuitbreaker.instances.userService.automatic-transition-from-open-to-half-open-enabled=${RESILIENCE4J_CIRCUITBREAKER_USERSERVICE_AUTOMATIC_TRANSITION:true}
resilience4j.circuitbreaker.instances.userService.wait-duration-in-open-state=${RESILIENCE4J_CIRCUITBREAKER_USERSERVICE_WAIT_DURATION:5s}
resilience4j.circuitbreaker.instances.userService.permitted-number-of-calls-in-half-open-state=${RESILIENCE4J_CIRCUITBREAKER_USERSERVICE_PERMITTED_CALLS:3}
resilience4j.circuitbreaker.instances.userService.sliding-window-size=${RESILIENCE4J_CIRCUITBREAKER_USERSERVICE_SLIDING_WINDOW_SIZE:10}
resilience4j.circuitbreaker.instances.userService.sliding-window-type=${RESILIENCE4J_CIRCUITBREAKER_USERSERVICE_SLIDING_WINDOW_TYPE:count_based}

# Borrow Service Configuration
borrow.default-loan-days=${BORROW_DEFAULT_LOAN_DAYS:14}
borrow.extension-days=${BORROW_EXTENSION_DAYS:7}
borrow.max-extensions=${BORROW_MAX_EXTENSIONS:1}
borrow.fine-per-day=${BORROW_FINE_PER_DAY:10}
borrow.max-active-borrows=${BORROW_MAX_ACTIVE_BORROWS:5}

# OpenAPI Configuration
springdoc.api-docs.path=${SPRINGDOC_API_DOCS_PATH:/api-docs}
springdoc.swagger-ui.path=${SPRINGDOC_SWAGGER_UI_PATH:/swagger-ui.html}
springdoc.swagger-ui.operations-sorter=${SPRINGDOC_SWAGGER_UI_OPERATIONS_SORTER:method}
springdoc.swagger-ui.tags-sorter=${SPRINGDOC_SWAGGER_UI_TAGS_SORTER:alpha}
springdoc.swagger-ui.doc-expansion=${SPRINGDOC_SWAGGER_UI_DOC_EXPANSION:none}
